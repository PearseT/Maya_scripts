import maya.cmds as cmds



def colorcon(s,c): # YELLOW 17, RED 13, BLUE 6, PALEBLUE 29, PALERED 31, MIDGREEN 23
        shape=s+'Shape'
        cmds.setAttr (s+'.overrideEnabled', 1)
        cmds.setAttr (s+'.overrideColor', c)   
def setScale(s,v):
    cmds.setAttr(s + '.sx', v)
    cmds.setAttr(s + '.sy', v)
    cmds.setAttr(s + '.sz', v)
def setRot(input, v):
    cmds.setAttr(input + '.rx', v)
    cmds.setAttr(input + '.ry', v)
    cmds.setAttr(input + '.rz', v)
def setTrans(s, v):
    cmds.setAttr(s + '.tx', v)
    cmds.setAttr(s + '.ty', v)
    cmds.setAttr(s + '.tz', v)  
def lockTranslate(l):
    cmds.setAttr(l+'.tx',l=True)
    cmds.setAttr(l+'.ty',l=True)
    cmds.setAttr(l+'.tz',l=True)
def lockRotate(l):
    cmds.setAttr(l+'.rx',l=True)
    cmds.setAttr(l+'.ry',l=True)
    cmds.setAttr(l+'.rz',l=True)
def lockScale(l):
    cmds.setAttr(l+'.sx',l=True)
    cmds.setAttr(l+'.sy',l=True)
    cmds.setAttr(l+'.sz',l=True)
def togVis(t):
    visState = cmds.getAttr(t + '.v')
    if visState == 0:
        cmds.setAttr(t + '.v', 1)
    else:
        cmds.setAttr(t + '.v', 0)
def temp(t):
    tempState = cmds.getAttr(t + '.template')
    if tempState == 0:
        cmds.setAttr(t + '.template', 1)
    else:
        cmds.setAttr(t + '.template', 0)
def jointLabel(e,name, side):
    cmds.setAttr(e + '.side', side)
    cmds.setAttr(e + '.type', 18)
    cmds.setAttr(e + '.otherType', name, type = 'string')
def freeze(e):
    cmds.makeIdentity(e ,apply = True,t = 1, r = 1, s = 1,n = 0, pn = 1)
def fkSetup(ctrl,jnt, distance):
    tempName = ctrl
    cmds.scale(distance/12, distance/12, distance/12, ctrl)
    freeze(ctrl)
    ctrl = cmds.rename(ctrl, 'tempItem')
    tempctrl = cmds.rename(cmds.listRelatives(ctrl, c = True)[0], tempName)
    cmds.parent(tempctrl, jnt, r = True, s = True)
    cmds.delete(ctrl)
def addRotationOrderctrl(s):
    cmds.addAttr(s,longName='Extra',at='enum',en=('____'),k=True )
    cmds.setAttr(s+'.Extra', lock=True)
    cmds.addAttr(s,longName='RotationOrder',at='enum',en=('xyz:yzx:zxy:xzy:yxz:zyx'),k=True )
    cmds.connectAttr(s+'.RotationOrder',s+'.rotateOrder')
          
'''--------------------------- leg template ---------------------------'''
def legTemplate(si, un):
    """

    :rtype: object
    """
    cmds.select(d = True)
    if cmds.objExists('c_' + un + 'Pelvis_bind'):
        bindJnts = ['c_' + un + 'Pelvis_bind', 'r_' + un + 'Femur_bind', 'r_' + un + 'Knee_bind', 'r_' + un + 'Ankle_bind', 'r_' + un + 'Ball_bind', 'r_' + un + 'BendyThighB_bind', 'r_' + un + 'BendyThighC_bind', 'r_' + un + 'BendyThighD_bind', 'r_' + un + 'BendyShinB_bind', 'r_' + un + 'BendyShinC_bind', 'r_' + un + 'BendyShinD_bind', 'l_' + un + 'Femur_bind', 'l_' + un + 'Knee_bind', 'l_' + un + 'Ankle_bind', 'l_' + un + 'Ball_bind', 'l_' + un + 'BendyThighB_bind', 'l_' + un + 'BendyThighC_bind', 'l_' + un + 'BendyThighD_bind', 'l_' + un + 'BendyShinB_bind', 'l_' + un + 'BendyShinC_bind', 'l_' + un + 'BendyShinD_bind']
        bindGrp = cmds.group(bindJnts, n = un + '_templateBindJnt_grp')
        cmds.parent(bindGrp, 'l_' + un + 'LegTemplate_grp')
        togVis(bindGrp)
        cmds.delete('c_' + un + 'PelvisFkctrl_grp') 
        try:
            cmds.delete('l_' + un + 'HeelTwistRev_MPD', 'r_' + un + 'HeelTwistRev_MPD', 'l_' + un + 'BlendTwistShin_bcl', 'r_' + un + 'BlendTwistShin_bcl')
        except:
            pass
    if cmds.objExists('l_' + un + 'LegTemplate_grp'):
        togVis('l_' + un + 'LegTemplate_grp')
    else:
        cmds.select(d = True)
        pelvisJnt = cmds.joint(n = 'c_' + un + 'PelvisBnd_jnt_temp')
        cmds.setAttr(pelvisJnt + '.radius', 2)
        cmds.select(d = True)
        femurJnt = cmds.joint(n = si + '_' + un + 'Femur_bnd_ctrl_temp')
        kneeJnt = cmds.joint(n = si + '_' + un + 'Knee_bnd_ctrl_temp')
        ankleJnt = cmds.joint(n = si + '_' + un + 'Ankle_bnd_ctrl_temp')
        ballJnt = cmds.joint(n = si + '_' + un + 'Ball_bnd_ctrl_temp')
        toeJnt = cmds.joint(n = si + '_' + un + 'Toe_jnt_temp')
        bankR = cmds.joint(n = si + '_' + un + 'R_footEdge_jnt_temp')
        bankL = cmds.joint(n = si + '_' + un + 'L_footEdge_jnt_temp')
        heel = cmds.joint(n = si + '_' + un + 'heel_jnt_temp')
        cmds.parent(heel, ankleJnt)
        cmds.parent(bankR, bankL, ballJnt)
        cmds.setAttr(pelvisJnt + '.ty', 12)
        cmds.setAttr(femurJnt + '.ty', 11)
        cmds.setAttr(femurJnt + '.tx', 1)
        cmds.setAttr(kneeJnt + '.ty', -5)
        cmds.setAttr(kneeJnt + '.tz', 1)
        cmds.setAttr(ankleJnt + '.ty', -5)
        cmds.setAttr(ankleJnt + '.tz', -1)
        cmds.setAttr(ballJnt+'.ty', -1)
        cmds.setAttr(ballJnt+'.tz', 1)
        cmds.setAttr(toeJnt+'.tz', 1) 
        cmds.setAttr(bankR + '.tx', -.3) 
        cmds.setAttr(bankL + '.tx', .3) 
        cmds.setAttr(heel + '.ty', -1) 
        # pv aim visualization
        midLoc = cmds.spaceLocator(n = si + '_' + un + '_legMidPoint_loc')[0]
        aimLoc = cmds.spaceLocator(n = si + '_' + un + '_legAimPoint_loc')[0]
        targetLoc = cmds.spaceLocator(n = si + '_' + un + '_legTargetPoint_loc')[0]
        pvPlacementLoc = cmds.spaceLocator( n = si + '_' + un + 'pvPlacement_loc')[0]
        pvPlcGrp = cmds.group(pvPlacementLoc, n = si + '_' + un + 'pvPlacementOffset')
        pvDirectionCtrl = cmds.curve(d = 1, p = [ (-0.124602, 0, -1.096506),(-0.975917, 0, -1.036319), (-0.559059, 0, -0.944259), (-0.798049, 0, -0.798033), (-1.042702, 0, -0.431934), (-1.128672, 0, 0), (-1.042702, 0, 0.431934), (-0.798049, 0, 0.798033), (-0.560906, 0, 0.946236), (-0.975917, 0, 1.036319), (-0.124602, 0, 1.09650), (-0.537718, 0, 0.349716), (-0.440781, 0, 0.788659), (-0.652776, 0, 0.652998), (-0.853221, 0, 0.353358), (-0.923366, 0, 0), (-0.853221, 0, -0.353358), (-0.652776, 0, -0.652998), (-0.439199, 0, -0.785581), (-0.537718, 0, -0.349716), (-0.124602, 0, -1.096506)], n = un +'PvLegDirection_ctrl')
        cmds.xform(pvDirectionCtrl, cp = True)
        cmds.rotate(-90,0,0, pvDirectionCtrl)
        freeze(pvDirectionCtrl)
        cmds.setAttr(pvDirectionCtrl + '.rx', l = True)
        cmds.setAttr(pvDirectionCtrl + '.ry', l = True)
        lockTranslate(pvDirectionCtrl)
        lockScale(pvDirectionCtrl)
        pvDirectionCtrlGrp = cmds.group(pvDirectionCtrl, n = un + 'PvLegDirectionCtrl_grp')
        cmds.parent(pvPlcGrp, pvDirectionCtrl, r = True)
        cmds.setAttr(pvPlacementLoc + '.ty', l = True)
        cmds.setAttr(pvPlacementLoc + '.tz', l = True)
        lockRotate(pvPlacementLoc)
        lockScale(pvPlacementLoc)
        cmds.pointConstraint(kneeJnt, pvDirectionCtrlGrp)
        cmds.orientConstraint(aimLoc, pvDirectionCtrlGrp)
        cmds.setAttr(midLoc + '.localScaleX',0)
        cmds.setAttr(midLoc + '.localScaleY',0)
        cmds.setAttr(midLoc + '.localScaleZ',0)
        cmds.setAttr(aimLoc + '.localScaleX',0)
        cmds.setAttr(aimLoc + '.localScaleY',0)
        cmds.setAttr(aimLoc + '.localScaleZ',0)
        cmds.setAttr(targetLoc + '.localScaleX',.5)
        cmds.setAttr(targetLoc + '.localScaleY',.5)
        cmds.setAttr(targetLoc + '.localScaleZ',.5)
        cmds.setAttr(targetLoc + '.tx', 4.5)
        cmds.parent(aimLoc, midLoc)
        cmds.parent(targetLoc, aimLoc)
        cmds.parentConstraint(femurJnt, ankleJnt, midLoc)
        cmds.aimConstraint(kneeJnt, aimLoc, wut = 'object', wuo = femurJnt, wu = (0,1,0))
        aimCurve = cmds.curve(d = 1, p=[(1, 0, 0),(0, 0, 0)], n = si + '_' + un + '_legAimVectorCurve')
        aimClsA = cmds.cluster(aimCurve + '.cv[0]', n = si + '_' + un + '_legAimcurveClsA')[1]
        aimClsB = cmds.cluster(aimCurve + '.cv[1]', n = si + '_' + un + '_legAimcurveClsB')[1]
        cmds.parentConstraint(kneeJnt, aimClsA)
        cmds.parentConstraint(targetLoc, aimClsB)
        cmds.delete(cmds.parentConstraint(targetLoc, pvPlcGrp))
        # cleanup
        tempGrp = cmds.group(pvDirectionCtrlGrp, midLoc, aimClsA, aimClsB, aimCurve, n = si + '_' + un + 'LegTemplateRig_grp')
        moverCircle = cmds.circle(r = 6, nr=(0,1,0), n = 'legScale_ctrl', ch = False)[0]
        colorcon(pelvisJnt, 22)
        colorcon(femurJnt, 22)
        colorcon(moverCircle, 22)
        togVis(aimClsA), togVis(aimClsB)
        temp(midLoc), temp(aimCurve)
        cmds.delete(cmds.parentConstraint(kneeJnt,moverCircle))
        cmds.parent(tempGrp, pelvisJnt, femurJnt, moverCircle)
        noTransGrp = cmds.group(aimCurve, n = 'legNoTransform_grp')
        cmds.setAttr(noTransGrp + '.inheritsTransform', 0)
        tempGrp = cmds.group(moverCircle, n = si + '_' + un + 'LegTemplate_grp')
        togVis(targetLoc)
        if cmds.objExists(un + 'Template_grp'):
            cmds.parent(tempGrp, un + 'Template_grp')
        return pelvisJnt, femurJnt, kneeJnt, ankleJnt, ballJnt, toeJnt, tempGrp, moverCircle, targetLoc
              
'''--------------------------- leg rig ---------------------------'''
def legSetup(si, un):
    if si == 'l':
        cmds.select(d = True)
        pelvisJnt = cmds.joint(n = 'c_' + un + 'PelvisBnd_jnt')
        cmds.setAttr(pelvisJnt + '.radius', 2)
        togVis('l_' + un + 'LegTemplate_grp')
        cmds.delete(cmds.parentConstraint(pelvisJnt + '_temp', pelvisJnt))
    cmds.select(d = True)
    femurJnt = cmds.joint(n = si + '_' + un + 'Femur_bnd_ctrl')
    kneeJnt = cmds.joint(n = si + '_' + un + 'Knee_bnd_ctrl')
    ankleJnt = cmds.joint(n = si + '_' + un + 'Ankle_bnd_ctrl')
    ballJnt = cmds.joint(n = si + '_' + un + 'Ball_bnd_ctrl')
    toeJnt = cmds.joint(n = si + '_' + un + 'Toe_jnt')
    cmds.delete(cmds.parentConstraint('l' + femurJnt[1:] + '_temp', femurJnt))
    cmds.delete(cmds.parentConstraint('l' + kneeJnt[1:] + '_temp', kneeJnt))
    cmds.delete(cmds.parentConstraint('l' + ankleJnt[1:] + '_temp', ankleJnt))
    cmds.delete(cmds.parentConstraint('l' + ballJnt[1:] + '_temp', ballJnt))
    cmds.delete(cmds.parentConstraint('l' + toeJnt[1:] + '_temp', toeJnt))
    sOffset = cmds.group(em = True, n = si + '_' + un + 'FemurOffset_grp')
    eOffset = cmds.group(em = True, n = si + '_' + un + 'Knee_Offset_grp')
    bOffset = cmds.group(em = True, n = si + '_' + un + 'BallOffset_grp')
    tOffset = cmds.group(em = True, n = si + '_' + un + 'ToeOffset_grp')
    cmds.delete(cmds.parentConstraint(femurJnt, sOffset))
    cmds.parent(femurJnt, sOffset)
    cmds.setAttr(femurJnt + '.jointOrientX', 0)
    cmds.setAttr(femurJnt + '.jointOrientY', 0)
    cmds.setAttr(femurJnt + '.jointOrientZ', 0)
    setRot(femurJnt, 0)
    cmds.setAttr(kneeJnt + '.jointOrientX', cmds.getAttr(kneeJnt + '.rx'))
    cmds.setAttr(kneeJnt + '.jointOrientY', cmds.getAttr(kneeJnt + '.ry'))
    cmds.setAttr(kneeJnt + '.jointOrientZ', cmds.getAttr(kneeJnt + '.rz'))
    setRot(kneeJnt, 0)
    cmds.setAttr(ankleJnt + '.jointOrientX', cmds.getAttr(ankleJnt + '.rx'))
    cmds.setAttr(ankleJnt + '.jointOrientY', cmds.getAttr(ankleJnt + '.ry'))
    cmds.setAttr(ankleJnt + '.jointOrientZ', cmds.getAttr(ankleJnt + '.rz'))
    setRot(ankleJnt, 0)
    cmds.setAttr(ballJnt + '.jointOrientX', cmds.getAttr(ballJnt + '.rx'))
    cmds.setAttr(ballJnt + '.jointOrientY', cmds.getAttr(ballJnt + '.ry'))
    cmds.setAttr(ballJnt + '.jointOrientZ', cmds.getAttr(ballJnt + '.rz'))
    setRot(ballJnt, 0)
    cmds.delete(cmds.parentConstraint(kneeJnt, eOffset))
    cmds.parent(eOffset, femurJnt), cmds.parent(kneeJnt, eOffset)
    cmds.delete(cmds.parentConstraint(ballJnt, bOffset))
    cmds.parent(bOffset, ankleJnt), cmds.parent(ballJnt, bOffset)
    cmds.delete(cmds.parentConstraint(toeJnt, tOffset))
    cmds.parent(tOffset, ballJnt), cmds.parent(toeJnt, tOffset)
    ''' get scale of leg '''
    legstart = cmds.xform(femurJnt, q = True, ws = True, rp = True)
    legend = cmds.xform(ankleJnt, q = True, ws = True, rp = True)
    dist = cmds.createNode('distanceDimShape',n = 'deleteme_distance')
    cmds.setAttr(dist + '.endPoint', *(legend))
    cmds.setAttr(dist + '.startPoint', *(legstart))
    distance = cmds.getAttr(dist + '.distance')
    cmds.delete(cmds.listRelatives(dist, p = True))
    ''' fk setup '''
    femurFk = cmds.curve(d = 1, p = [(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = si + '_' + un + 'FemurFk_ctrl')
    kneeFk = cmds.curve(d = 1, p = [(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = si + '_' + un + 'Knee_Fk_ctrl')
    ankleFk = cmds.curve(d = 1, p = [(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = si + '_' + un + 'AnkleFk_ctrl')
    ballFk = cmds.curve(d = 1, p = [(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = si + '_' + un + 'BallFk_ctrl')
    toeFk = cmds.curve(d = 1, p = [(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = si + '_' + un + 'Knee_Fk_ctrl')
    fkSetup(femurFk, femurJnt, distance)
    fkSetup(kneeFk, kneeJnt, distance)
    fkSetup(ankleFk, ankleJnt, distance)
    fkSetup(ballFk, ballJnt, distance)
    fkSetup(toeFk, toeJnt, distance)
    ''' ik setup'''
    # setup ikHandle rotate plane solver
    ikLegctrl = cmds.curve(d = 1, p=[(0.5,0.5,0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),(0.5,-0.5,-0.5),(-0.5,-0.5,-0.5),(-0.5,-0.5,0.5),(0.5,-0.5,0.5),(-0.5,-0.5,0.5),(-0.5,0.5,0.5)], n = si + '_' + un + 'IkLeg_ctrl')
    cmds.rename(cmds.listRelatives(ikLegctrl, c = True)[0], si + '_' + un + 'IklegShape')
    cmds.scale(distance/9, distance/9, distance/9, ikLegctrl)
    freeze(ikLegctrl)
    footctrlGrp = cmds.group(ikLegctrl, n = si + '_' + un + 'IkFootctrl_grp')
    cmds.delete(cmds.parentConstraint(ankleJnt, footctrlGrp))
    ik_handle = cmds.ikHandle( sj = femurJnt, ee = ankleJnt, n = si + '_' + un + 'LegIkRPsolver_ikh', sol = 'ikRPsolver')[0]
    cmds.setAttr(ik_handle + '.ikFkManipulation', 1)
    pv = cmds.curve(d = 1, p=[(0.5,0.5,0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),(0.5,-0.5,-0.5),(-0.5,-0.5,-0.5),(-0.5,-0.5,0.5),(0.5,-0.5,0.5),(-0.5,-0.5,0.5),(-0.5,0.5,0.5)], n = si + '_' + un + 'LegPolevector_ctrl')
    cmds.rename(cmds.listRelatives(pv, c = True)[0], si + '_' + un + 'LegPolevectorShape')
    cmds.scale(distance/10, distance/10, distance/10, pv)
    freeze(pv)
    pvgrp = cmds.group(pv, n = si + '_' + un + 'LegPoleVectorctrl_grp')
    cmds.delete(cmds.parentConstraint( 'l_' + un + 'pvPlacement_loc', pvgrp))
    neutralWorld = cmds.spaceLocator(n = si + '_' + un + 'LegsNeutralWorldPv_loc')[0]
    cmds.delete(cmds.pointConstraint(pv, neutralWorld))
    localWorld = cmds.spaceLocator(n = si + '_' + un + 'LegsLocalFootPv_loc')[0]
    cmds.parent(localWorld, ikLegctrl)
    cmds.delete(cmds.pointConstraint(pv, localWorld))
    poleCon = cmds.parentConstraint(neutralWorld, localWorld, pvgrp, mo = True)[0]
    cmds.poleVectorConstraint(pv, ik_handle)
    cmds.parent(ik_handle, ikLegctrl)
    # add shared attributes for leg
    legFunc = cmds.curve(d = 1, p = [(0,0,0),(1,0,0)], n = si + '_' + un + 'LegAttributes')
    legShape = cmds.rename(cmds.listRelatives(legFunc, c = True)[0], si + '_' + un + 'LegFunctionShape')
    cmds.addAttr(legShape, longName = 'IK_FK_SWITCHES',at = 'enum', en = ('____'), k = True)
    cmds.addAttr(legShape, longName = 'FK_IK_leg',at = 'float', max = 1, min = 0, k = True )
    cmds.addAttr(legShape, longName = 'FK_IK_poleVector',at = 'enum', en = 'world:ankle', k = True )
    cmds.addAttr(legShape, longName = 'bendyLeg',at = 'float', max = 1, min = 0 , k = True )
    cmds.addAttr(legShape, longName = 'stretchLegScale',at = 'float', k = True )
    cmds.setAttr(legShape + '.bendyLeg', 1)
    cmds.setAttr(legShape + '.IK_FK_SWITCHES', l = True)
    cmds.setAttr(legShape + '.FK_IK_leg', 1)
    cmds.setAttr(legShape + '.stretchLegScale', 1)
    rev = cmds.createNode('reverse', n = 'ikLegSwitch_rev')
    cmds.connectAttr(legShape + '.FK_IK_poleVector', rev + '.ix')
    cmds.connectAttr(legShape + '.FK_IK_leg', rev + '.iz')
    # connect PV
    cmds.connectAttr(rev + '.ox', poleCon + '.' + neutralWorld + 'W0')
    cmds.connectAttr(legShape + '.FK_IK_poleVector', poleCon + '.' + localWorld + 'W1')
    # create pointer for pv
    cmds.select(d = True)
    pvJnt = cmds.joint(n = si + '_' + un + 'PvLeg_jnt')
    cmds.setAttr(pvJnt + '.v', 0)
    cmds.parent(pvJnt, pv, r = True)
    pvCurve = cmds.curve(d = 1, p = [(0,0,0),(0,0,1)], n = si + '_' + un + 'PvLegPointer_crv')
    cls1 = cmds.cluster(pvCurve + '.cv[0]')
    cls2 = cmds.cluster(pvCurve + '.cv[1]')
    cmds.delete(cmds.parentConstraint(pvJnt, cls1))
    cmds.delete(cmds.parentConstraint(kneeJnt, cls2))
    cmds.delete(pvCurve, ch = True)
    cmds.skinCluster(pvJnt, kneeJnt, pvCurve)
    cmds.parent(pvCurve, pv)
    cmds.setAttr(pvCurve + '.inheritsTransform', 0)
    # stretch overall leg hack
    cmds.connectAttr(legShape + '.stretchLegScale', femurJnt + '.sy')
    cmds.connectAttr(legShape + '.stretchLegScale', kneeJnt + '.sy')
    # parent attr shape on controllers and more parenting
    cmds.parent(legShape, ikLegctrl, shape = True, add = True)
    cmds.parent(legShape, femurJnt, shape = True, add = True)
    cmds.parent(legShape, kneeJnt, shape = True, add = True)
    cmds.parent(legShape, ankleJnt, shape = True, add = True)
    cmds.parent(legShape, ballJnt, shape = True, add = True)
    cmds.parent(legShape, toeJnt, shape = True, add = True)
    cmds.parent(legShape, pv, shape = True, add = True)
    legGrp = cmds.group(footctrlGrp, pvgrp, n = si + '_' + un + 'LegIk_grp')
    ''' make main leg ctrl '''
    if cmds.objExists('c_' + un + 'PelvisFk_ctrl'):
        pelvisctrl =  'c_' + un + 'PelvisFk_ctrl'
        pelvisctrlGrp =  'c_' + un + 'PelvisFkctrl_grp'
        pelvisSubctrl =  'c_' + un + 'PelvisIk_ctrl'
        pelvisSubctrlGrp =  'c_' + un + 'PelvisIkctrl_grp'
    else:
        pelvisctrl = cmds.curve(d = 1, p=[(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = 'c_' + un + 'PelvisFk_ctrl')
        cmds.scale(distance/4.5, distance/4.5, distance/4.5, pelvisctrl)
        freeze(pelvisctrl)
        pelvisctrlGrp = cmds.group(pelvisctrl, n =  'c_' + un + 'PelvisFkctrl_grp')
        pelvisSubctrl = cmds.curve(d = 1, p=[(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)], n = 'c_' + un + 'PelvisIk_ctrl')
        cmds.scale(distance/5, distance/5, distance/5, pelvisSubctrl)
        freeze(pelvisSubctrl)
        pelvisSubctrlGrp = cmds.group(pelvisSubctrl, n =  'c_' + un + 'PelvisIkctrl_grp')
        cmds.parent(pelvisSubctrlGrp, pelvisctrl)
        cmds.delete(cmds.pointConstraint(pelvisJnt, pelvisctrlGrp))
    ''' foot setup '''
    cmds.addAttr(ikLegctrl, longName = 'Foot_functions',at = 'enum', en = ('____'),k = True)
    cmds.addAttr(ikLegctrl, longName = 'Foot_roll',at = 'float', k = True )
    cmds.addAttr(ikLegctrl, longName = 'Foot_bank',at = 'float', k = True )
    cmds.addAttr(ikLegctrl, longName = 'Tip_roll',at = 'float',k = True )
    cmds.addAttr(ikLegctrl, longName = 'Tip_twist',at = 'float',k = True )
    cmds.addAttr(ikLegctrl, longName = 'Heel_roll',at = 'float', k = True )
    cmds.addAttr(ikLegctrl, longName = 'Heel_twist',at = 'float', k = True )
    cmds.addAttr(ikLegctrl, longName = 'Heel_tilt',at = 'float', k = True )
    cmds.setAttr(ikLegctrl + '.Foot_functions', l = True)
    cmds.select(d = True)
    heelJnt = cmds.joint(n = si + '_' + un + 'HeelFootRool_jnt')
    footTipJnt = cmds.joint(n =  si + '_' + un + 'FootTipFootRool_jnt')
    ballRollJnt = cmds.joint(n = si + '_' + un + 'BallFootRool_jnt')
    footAnkleJnt = cmds.joint(n = si + '_' + un + '_footAnkleTipFootRool_jnt')
    heelOffset = cmds.group(heelJnt, n = si + '_' + un + 'HeelFootRollJnt_grp')
    cmds.delete(cmds.pointConstraint('l_' + un + 'heel_jnt_temp', heelOffset))
    cmds.delete(cmds.aimConstraint(toeJnt, heelOffset, aim = (0,0,1), u = (0,1,0), wuo = ankleJnt))
    cmds.delete(cmds.pointConstraint(toeJnt, footTipJnt))
    cmds.delete(cmds.pointConstraint(ballJnt, ballRollJnt))
    cmds.delete(cmds.pointConstraint(ankleJnt, footAnkleJnt))
    cmds.parent(ik_handle, footAnkleJnt)
    setRot(ballJnt, 0)
    IKFoot_handle = cmds.ikHandle( sj = ankleJnt, ee = ballJnt, n = si + '_' + un + 'FootIkSCsolver', sol = 'ikSCsolver')[0]
    IKToe_handle = cmds.ikHandle( sj = ballJnt, ee = toeJnt, n = si + '_' + un + 'ToeIkSCsolver', sol = 'ikSCsolver')[0]
    Ballctrl = cmds.curve(d = 1, p = [ (-0.124602, 0, -1.096506),(-0.975917, 0, -1.036319), (-0.559059, 0, -0.944259), (-0.798049, 0, -0.798033), (-1.042702, 0, -0.431934), (-1.128672, 0, 0), (-1.042702, 0, 0.431934), (-0.798049, 0, 0.798033), (-0.560906, 0, 0.946236), (-0.975917, 0, 1.036319), (-0.124602, 0, 1.09650), (-0.537718, 0, 0.349716), (-0.440781, 0, 0.788659), (-0.652776, 0, 0.652998), (-0.853221, 0, 0.353358), (-0.923366, 0, 0), (-0.853221, 0, -0.353358), (-0.652776, 0, -0.652998), (-0.439199, 0, -0.785581), (-0.537718, 0, -0.349716), (-0.124602, 0, -1.096506)], n = si + '_' + un + 'Ball_ctrl')
    cmds.setAttr(Ballctrl + '.rz',-90)
    cmds.scale(distance/20, distance/20, distance/20, Ballctrl)
    freeze(Ballctrl)
    BallctrlGrp = cmds.group(Ballctrl, n = si + '_' + un + 'Ballctrl_grp')
    cmds.connectAttr(legShape + '.FK_IK_leg', BallctrlGrp + '.visibility')
    cmds.delete(cmds.parentConstraint(ballJnt, BallctrlGrp))
    cmds.parentConstraint(footTipJnt,BallctrlGrp,mo=True)
    rotationLoc = cmds.spaceLocator(n = si + '_' + un + 'IKtoeRotate_LOC')[0]
    cmds.delete(cmds.pointConstraint(toeJnt, rotationLoc))
    cmds.parent(rotationLoc, Ballctrl)
    cmds.setAttr(rotationLoc + '.v',0)
    cmds.parent(IKFoot_handle, ballRollJnt)
    cmds.parent(IKToe_handle, rotationLoc)
    lCond = cmds.createNode('condition', n = si + '_' + un + 'FootRollCondition')
    lCond2 = cmds.createNode('condition', n = si + '_' + un + 'FootRollBackCondition')
    lRollAdd = cmds.createNode('addDoubleLinear',n = si + '_' + un +'RollToeTipRotValue')
    lRollAdd2 = cmds.createNode('addDoubleLinear',n = si + '_' + un + 'RollToeRootRotValue')
    revRollMpd = cmds.createNode('multiplyDivide', n = si + '_' + un + 'FootRollReverse_MPD')
    cmds.connectAttr(ikLegctrl + '.Foot_roll', lCond + '.firstTerm')
    cmds.connectAttr(ikLegctrl + '.Foot_roll', lRollAdd + '.input1')
    cmds.connectAttr(lRollAdd + '.output', lCond + '.colorIfTrueR')
    cmds.connectAttr(lCond + '.outColorR', footTipJnt + '.rx')
    cmds.setAttr(lCond + '.secondTerm', 30) # everything 40 needs to change to change foot roll value...
    cmds.setAttr(lCond + '.operation', 3)
    cmds.setAttr(lRollAdd + '.input2', -30)
    cmds.setAttr(lCond + '.colorIfFalseR', 0)
    cmds.setAttr(lCond2 + '.secondTerm', 30)
    cmds.setAttr(lCond2 + '.operation', 3)
    cmds.setAttr(lRollAdd2 + '.input2', -60) # this needs to be negative double of whatever that 40 above is...
    cmds.setAttr(revRollMpd + '.input2X', -1)
    cmds.connectAttr(lRollAdd2 + '.o', revRollMpd + '.input1X')
    cmds.connectAttr(ikLegctrl + '.Foot_roll', lRollAdd2 + '.input1')
    cmds.connectAttr(ikLegctrl + '.Foot_roll', lCond2 + '.colorIfFalseR')
    cmds.connectAttr(ikLegctrl + '.Foot_roll', lCond2 + '.firstTerm')
    cmds.connectAttr(ikLegctrl + '.Heel_roll', heelJnt + '.rx')
    mpd = cmds.createNode('multiplyDivide', n = si + '_' + un + 'HeelTwistRev_MPD')
    cmds.setAttr(mpd + '.i2x', -1)
    cmds.setAttr(mpd + '.i2y', -1)
    cmds.connectAttr(ikLegctrl + '.Heel_twist', heelJnt + '.ry')
    cmds.connectAttr(revRollMpd + '.ox', lCond2 + '.colorIfTrueR')
    cmds.connectAttr(lCond2 + '.outColorR', ballRollJnt + '.rx')
    footRollLoc = cmds.spaceLocator(n = si + '_' + un + 'toeRoll_loc')[0]
    footRollLocGrp = cmds.group(footRollLoc, n = si + '_' + un + 'toeRolLoc_grp')
    cmds.delete(cmds.parentConstraint(footTipJnt, footRollLocGrp))
    cmds.parent(heelOffset, footRollLoc)
    cmds.connectAttr(ikLegctrl + '.Tip_roll', footRollLoc + '.rx')
    lockScale(Ballctrl)
    lockTranslate(Ballctrl)
    footTipctrl = cmds.curve(d = 1, p = [ (-0.124602, 0, -1.096506),(-0.975917, 0, -1.036319), (-0.559059, 0, -0.944259), (-0.798049, 0, -0.798033), (-1.042702, 0, -0.431934), (-1.128672, 0, 0), (-1.042702, 0, 0.431934), (-0.798049, 0, 0.798033), (-0.560906, 0, 0.946236), (-0.975917, 0, 1.036319), (-0.124602, 0, 1.09650), (-0.537718, 0, 0.349716), (-0.440781, 0, 0.788659), (-0.652776, 0, 0.652998), (-0.853221, 0, 0.353358), (-0.923366, 0, 0), (-0.853221, 0, -0.353358), (-0.652776, 0, -0.652998), (-0.439199, 0, -0.785581), (-0.537718, 0, -0.349716), (-0.124602, 0, -1.096506)], n = si + '_' + un + 'FootTip_ctrl')
    cmds.setAttr(footTipctrl + '.ry', 90)
    cmds.scale(distance/20, distance/20, distance/20, footTipctrl)
    freeze(footTipctrl)
    footTipctrlOffsetGrp = cmds.group(footTipctrl, n = si + '_' + un + 'FootTipctrlOffset_grp')
    footTipctrlGrp = cmds.group(footTipctrlOffsetGrp, n = si + '_' + un + 'FootTipctrl_grp')
    cmds.delete(cmds.parentConstraint(toeJnt, footTipctrlGrp))
    cmds.delete(cmds.pointConstraint(toeJnt, footTipctrlGrp))
    cmds.connectAttr(ikLegctrl + '.Tip_twist', footTipctrlOffsetGrp + '.ry')
    cmds.connectAttr(ikLegctrl + '.Heel_tilt', heelJnt + '.rz')
    # get foot rool connected up to ik and fk
    cmds.parent(footRollLocGrp, footTipctrl)
    cmds.parent(footTipctrlGrp, BallctrlGrp, ikLegctrl)
    ''' connect IK leg blend '''
    cmds.connectAttr(legShape + '.FK_IK_leg', ik_handle + '.ikBlend')
    cmds.connectAttr(legShape + '.FK_IK_leg', IKToe_handle + '.ikBlend')
    cmds.connectAttr(legShape + '.FK_IK_leg', IKFoot_handle + '.ikBlend')
    cmds.connectAttr(legShape + '.FK_IK_leg', ikLegctrl + '.v')
    cmds.connectAttr(legShape + '.FK_IK_leg', pv + '.v')
    cmds.connectAttr(rev + '.oz', femurFk + '.v')
    cmds.connectAttr(rev + '.oz', kneeFk + '.v')
    cmds.connectAttr(rev + '.oz', ankleFk + '.v')
    cmds.connectAttr(rev + '.oz', ballFk + '.v')
    cmds.connectAttr(rev + '.oz', toeFk + '.v')
    ''' leg twist '''
    ''' Femur '''
    femurAimLoc = cmds.spaceLocator(n = si + '_' + un + 'FemurTwistAimer_loc')[0]
    femurTargetLoc = cmds.spaceLocator(n= si + '_' + un + 'FemurTwistTarget_loc')[0]
    cmds.delete(cmds.parentConstraint(femurJnt, femurTargetLoc)) 
    cmds.delete(cmds.parentConstraint(femurJnt, femurAimLoc))
    cmds.delete(cmds.pointConstraint(kneeJnt, femurAimLoc))
    cmds.parent(femurAimLoc, kneeJnt)
    cmds.parent(femurTargetLoc, femurJnt)
    # creating joints for legroll
    cmds.select(d = True)
    legTwistJnt1=cmds.joint(n = si + '_' + un + 'TwistThighA_jnt')
    legTwistJnt2=cmds.joint(n = si + '_' + un + 'TwistThighB_bnd_jnt')
    legTwistJnt3=cmds.joint(n = si + '_' + un + 'TwistThighC_bnd_jnt')
    legTwistJnt4=cmds.joint(n = si + '_' + un + 'TwistThighD_bnd_jnt')
    legTwistJnt4End=cmds.joint(n = si + '_' + un + '_TwistLThighDEnd_jnt')
    cmds.setAttr(legTwistJnt4End + '.v', 0)
    cmds.setAttr(legTwistJnt2 + '.radius', 2.5)
    cmds.setAttr(legTwistJnt3 + '.radius', 2.5)
    cmds.setAttr(legTwistJnt4 + '.radius', 2.5)
    cmds.delete(cmds.parentConstraint(femurJnt, legTwistJnt1))
    upperLegDist = cmds.createNode('distanceDimShape', n = si + '_' + un + '_relativeFemurScaleShape_dst')
    cmds.connectAttr(femurAimLoc + '.worldPosition[0]', upperLegDist + '.startPoint')
    cmds.connectAttr(femurTargetLoc + '.worldPosition[0]', upperLegDist + '.endPoint')
    upperLegLength = cmds.getAttr(upperLegDist + '.distance')/4
    upperLegStretchMpd = cmds.createNode('multiplyDivide', n = si + '_' + un + '_stretchyThigh_mpd')
    cmds.setAttr(upperLegStretchMpd + '.input1Z', -upperLegLength)
    cmds.connectAttr(legShape+'.stretchLegScale', upperLegStretchMpd + '.input2Z')
    cmds.delete(cmds.listRelatives(upperLegDist, p = True)[0])
    cmds.connectAttr(upperLegStretchMpd + '.oz', legTwistJnt4End+ '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legTwistJnt2 + '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legTwistJnt3 + '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legTwistJnt4 + '.ty')
    cmds.parent(legTwistJnt1, femurJnt)
    cmds.delete(cmds.aimConstraint(kneeJnt, legTwistJnt1, aim = (0,-1,0), wuo = pv, wu = (0,0,1)))
    spineCurve = cmds.ikHandle(sj = legTwistJnt1, ee = legTwistJnt4End, ns = 3, n = si + '_' + un + 'FemurTwistShinSpline_ikh', ccv = 1, sol = 'ikSplineSolver')
    spineCurve[2] = cmds.rename(spineCurve[2], si + '_' + un + 'FemurSplineTwist_crv')
    cmds.parent(spineCurve[0], femurJnt)
    splineCurveAimGrp = cmds.group(em = True, n = si + '_' + un + 'FemurTwistAim_grp')
    cmds.parent(splineCurveAimGrp, femurJnt, r = True)
    cmds.aimConstraint(kneeJnt, splineCurveAimGrp)
    cmds.parent(spineCurve[2], splineCurveAimGrp)
    cmds.setAttr(spineCurve[0] + '.dTwistControlEnable', 1)
    cmds.setAttr(spineCurve[0] + '.dWorldUpType', 4)
    cmds.setAttr(spineCurve[0] + '.dWorldUpVectorX', -1)
    cmds.setAttr(spineCurve[0] + '.dWorldUpVectorY', 0)
    cmds.setAttr(spineCurve[0] + '.dForwardAxis', 2)
    cmds.setAttr(spineCurve[0] + '.dWorldUpAxis', 7)
    cmds.connectAttr(femurAimLoc + '.worldMatrix', spineCurve[0] + '.dWorldUpMatrixEnd')
    cmds.connectAttr(femurTargetLoc + '.worldMatrix', spineCurve[0] + '.dWorldUpMatrix')
    togVis(spineCurve[0])
    ''' leg shin twist '''
    ''' shin '''
    aimLoc = cmds.spaceLocator(n= si + '_' + un + 'LegShinTwistAimer_loc')[0]
    targetLoc = cmds.spaceLocator(n= si + '_' + un + 'LegShinTwistTarget_loc')[0]
    cmds.delete(cmds.parentConstraint(kneeJnt, targetLoc))
    cmds.delete(cmds.parentConstraint(kneeJnt, aimLoc))
    cmds.delete(cmds.pointConstraint(ankleJnt, aimLoc))
    cmds.parent(aimLoc, ankleJnt)
    cmds.parent(targetLoc, kneeJnt)
    # creating joints for legroll
    legShinTwistJnt1 = cmds.joint(n = si + '_' + un + 'TwistShinA_jnt')
    legShinTwistJnt2 = cmds.joint(n = si + '_' + un + 'TwistShinB_bnd_jnt')
    legShinTwistJnt3 = cmds.joint(n = si + '_' + un + 'TwistShinC_bnd_jnt')
    legShinTwistJnt4 = cmds.joint(n = si + '_' + un + 'TwistShinD_bnd_jnt')
    legShinTwistJnt4End = cmds.joint(n = si + '_' + un + 'TwistShinDEnd_jnt')
    cmds.setAttr(legShinTwistJnt2 + '.radius', 2.5)
    cmds.setAttr(legShinTwistJnt3 + '.radius', 2.5)
    cmds.setAttr(legShinTwistJnt4 + '.radius', 2.5)
    cmds.setAttr(legShinTwistJnt4End + '.v', 0)
    cmds.delete(cmds.parentConstraint(kneeJnt, legShinTwistJnt1))
    lowerLegDist = cmds.createNode('distanceDimShape', n = si + '_' + un + '_relativeShinScaleShape_dst')
    cmds.connectAttr(targetLoc + '.worldPosition[0]', lowerLegDist + '.startPoint')
    cmds.connectAttr(aimLoc + '.worldPosition[0]', lowerLegDist + '.endPoint')
    lowerLegLength = cmds.getAttr(lowerLegDist + '.distance')/4
    cmds.delete(cmds.listRelatives(lowerLegDist, p = True)[0])
    lowerLegStretchMpd2 = cmds.createNode('multiplyDivide', n = si + '_' + un + '_stretchyShin_mpd')
    cmds.setAttr(lowerLegStretchMpd2 + '.input1Z', -lowerLegLength)
    cmds.connectAttr(legShape+'.stretchLegScale', lowerLegStretchMpd2 + '.input2Z')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinTwistJnt4End+ '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinTwistJnt2 + '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinTwistJnt3 + '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinTwistJnt4 + '.ty')
    cmds.parent(legShinTwistJnt1, kneeJnt)
    cmds.delete(cmds.aimConstraint(ankleJnt, legShinTwistJnt1, aim = (0,-1,0), wuo = pv, wu = (0,0,1)))
    spineCurve = cmds.ikHandle(sj = legShinTwistJnt1, ee = legShinTwistJnt4End, ns = 3, n = si + '_' + un + 'ShinTwistShinSpline_ikh', ccv = 1, sol = 'ikSplineSolver')
    spineCurve[2] = cmds.rename(spineCurve[2], si + '_' + un + 'ShinSplineTwist_crv')
    cmds.parent(spineCurve[0], kneeJnt)
    togVis(splineCurveAimGrp)
    splineCurveAimGrp = cmds.group(em = True, n = si + '_' + un + 'ShinSplineTwistAim_grp')
    cmds.parent(splineCurveAimGrp, kneeJnt, r = True)
    cmds.aimConstraint(ankleJnt, splineCurveAimGrp)
    cmds.parent(spineCurve[2], splineCurveAimGrp)
    cmds.setAttr(spineCurve[0] + '.dTwistControlEnable', 1)
    cmds.setAttr(spineCurve[0] + '.dWorldUpType',4)
    cmds.setAttr(spineCurve[0] + '.dForwardAxis', 2)
    cmds.setAttr(spineCurve[0] + '.dWorldUpAxis', 7)
    cmds.setAttr(spineCurve[0] + '.dWorldUpVectorX', -1)
    cmds.setAttr(spineCurve[0] + '.dWorldUpVectorY', 0)
    cmds.setAttr(spineCurve[0] + '.dWorldUpVectorEndY', 1)
    cmds.connectAttr(aimLoc + '.worldMatrix', spineCurve[0] + '.dWorldUpMatrixEnd')
    cmds.connectAttr(targetLoc +'.worldMatrix', spineCurve[0] + '.dWorldUpMatrix')
    togVis(spineCurve[0])
    togVis(splineCurveAimGrp)
    ''' create bend setup '''
    # femur
    cmds.select(d = True)
    legrollJnt1=cmds.joint(n = si + '_' + un + 'BendyThighA_jnt')
    legrollJnt2=cmds.joint(n = si + '_' + un + 'BendyThighB_bnd_jnt')
    legrollJnt3=cmds.joint(n = si + '_' + un + 'BendyThighC_bnd_jnt')
    legrollJnt4=cmds.joint(n = si + '_' + un + 'BendyThighD_bnd_jnt')
    legrollJnt4End=cmds.joint(n = si + '_' + un + '_legDEnd_jnt')
    cmds.setAttr(legrollJnt4End + '.v', 0)
    cmds.setAttr(legrollJnt2 + '.radius', 2.5)
    cmds.setAttr(legrollJnt3 + '.radius', 2.5)
    cmds.setAttr(legrollJnt4 + '.radius', 2.5)
    cmds.delete(cmds.parentConstraint(femurJnt, legrollJnt1))
    cmds.connectAttr(upperLegStretchMpd + '.oz', legrollJnt4End + '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legrollJnt2 + '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legrollJnt3 + '.ty')
    cmds.connectAttr(upperLegStretchMpd + '.oz', legrollJnt4 + '.ty')
    cmds.parent(legrollJnt1, femurJnt)
    cmds.delete(cmds.aimConstraint(kneeJnt, legrollJnt1, aim = (0,-1,0), wuo = pv, wu = (0,0,1)))
    spineCurveFemur = cmds.ikHandle(sj = legrollJnt1, ee = legrollJnt4End, ns = 3, n = si + '_' + un + 'FemurBendSpline_ikh', ccv = 1, sol = 'ikSplineSolver')
    spineCurveFemur[2] = cmds.rename(spineCurveFemur[2], si + '_' + un + 'FemurBendCurve_crv')
    # shin
    legShinrollJnt1 = cmds.joint(n = si + '_' + un + 'BendyShinA_jnt')
    legShinrollJnt2 = cmds.joint(n = si + '_' + un + 'BendyShinB_bnd_jnt')
    legShinrollJnt3 = cmds.joint(n = si + '_' + un + 'BendyShinC_bnd_jnt')
    legShinrollJnt4 = cmds.joint(n = si + '_' + un + 'BendyShinD_bnd_jnt')
    legShinrollJnt4End = cmds.joint(n = si + '_' + un + 'LegShinDEnd_jnt')
    cmds.setAttr(legShinrollJnt2 + '.radius', 2.5)
    cmds.setAttr(legShinrollJnt3 + '.radius', 2.5)
    cmds.setAttr(legShinrollJnt4 + '.radius', 2.5)
    cmds.setAttr(legShinrollJnt4End + '.v', 0)
    cmds.delete(cmds.parentConstraint(kneeJnt, legShinrollJnt1))
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinrollJnt4End+ '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinrollJnt2 + '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinrollJnt3 + '.ty')
    cmds.connectAttr(lowerLegStretchMpd2 + '.oz', legShinrollJnt4 + '.ty')
    cmds.parent(legShinrollJnt1, kneeJnt)
    cmds.delete(cmds.aimConstraint(ankleJnt, legShinrollJnt1, aim = (0,-1,0), wuo = pv, wu = (0,0,1)))
    spineCurveShin = cmds.ikHandle(sj = legShinrollJnt1, ee = legShinrollJnt4End, ns = 3, n = si + '_' + un + 'ShinBendSpline_ikh', ccv = 1, sol = 'ikSplineSolver')
    spineCurveShin[2] = cmds.rename(spineCurveShin[2], si + '_' + un + 'ShinBendSplineCurve_crv')
    femurBendyctrl = cmds.circle(n = si + '_' + un + 'BendyFemur_ctrl', nr = (0,1,0), r = distance/8, ch = False)[0]
    bendyFemurJnt = cmds.joint(n = si + '_' + un + 'bendyFemur_jnt')    
    femurBendyRotGrp = cmds.group(femurBendyctrl, n = si + '_' + un + 'BendyLegFemurRot_grp')
    femurBendyctrlGrp = cmds.group(femurBendyRotGrp, n = si + '_' + un + 'BendyLegFemurctrl_grp')
    legShinBendyctrl = cmds.circle(n = si + '_' + un + 'BendyLegShin_ctrl', nr = (0,1,0), r = distance/8, ch = False)[0]
    bendyShinJnt = cmds.joint(n = si + '_' + un + 'bendyShin_jnt')    
    legShinBendyRotGrp = cmds.group(legShinBendyctrl, n = si + '_' + un + 'BendyLegShinRot_grp')
    legShinBendyctrlGrp = cmds.group(legShinBendyRotGrp, n = si + '_' + un + 'BendyLegShinctrl_grp')
    cmds.connectAttr(legShape + '.bendyLeg', legShinBendyctrlGrp + '.v')
    cmds.connectAttr(legShape + '.bendyLeg', femurBendyctrlGrp + '.v')
    # place bendy controllers
    cmds.delete(cmds.parentConstraint(femurJnt, femurBendyctrlGrp))
    cmds.delete(cmds.pointConstraint(legTwistJnt3, femurBendyctrlGrp))
    cmds.delete(cmds.parentConstraint(kneeJnt, legShinBendyctrlGrp))
    cmds.delete(cmds.pointConstraint(legShinTwistJnt3, legShinBendyctrlGrp))
    cmds.parent(femurBendyctrlGrp, femurJnt)
    cmds.parent(legShinBendyctrlGrp, kneeJnt)
    # moveable knee
    kneeJnt = cmds.rename(kneeJnt, si + '_' + un + 'Knee_bnd_ctrl')
    bendykneectrl = cmds.circle(n = si + '_' + un + 'FreeTransknee_ctrl', nr = (0,1,0), r = distance/8, ch = False)[0]
    bendyKneeJnt = cmds.joint(n = si + '_' + un + 'bendyKnee_jnt')
    cmds.select(femurJnt)
    bendyStaticKneeJnt = cmds.joint(n = si + '_' + un + 'bendyStaticKnee_jnt')
    cmds.pointConstraint(bendykneectrl, bendyStaticKneeJnt)
    bendykneectrlGrp = cmds.group(bendykneectrl, n = si + '_' + un + 'FreeTransKnee_grp')
    cmds.parent(bendykneectrlGrp, kneeJnt, r = True)
    lockScale(bendykneectrl)
    cmds.connectAttr(legShape + '.bendyLeg', bendykneectrlGrp + '.v')
    cmds.parent(legFunc, legGrp)
    # these joints recieve translations and rotations from twist and bend setup above
    blendcl2 = cmds.createNode('blendColors', n = si + '_' + un + 'BlendTwistShin_bcl')
    neutralRot1 = cmds.createNode('addDoubleLinear', n = si + '_' + un + 'BlendTwistShinRX_bcl')
    neutralRot2 = cmds.createNode('addDoubleLinear', n = si + '_' + un + 'BlendTwistShinRX_bcl')
    neutralRot3 = cmds.createNode('addDoubleLinear', n = si + '_' + un + 'BlendTwistShinRX_bcl')
    cmds.setAttr(neutralRot1 + '.input2', -cmds.getAttr(legShinTwistJnt2 + '.ry'))
    cmds.setAttr(neutralRot2 + '.input2', -cmds.getAttr(legShinTwistJnt3 + '.ry'))
    cmds.setAttr(neutralRot3 + '.input2', -cmds.getAttr(legShinTwistJnt4 + '.ry'))
    cmds.connectAttr(legShinTwistJnt2 + '.ry', neutralRot1 + '.input1')
    cmds.connectAttr(legShinTwistJnt3 + '.ry', neutralRot2 + '.input1')
    cmds.connectAttr(legShinTwistJnt4 + '.ry', neutralRot3 + '.input1')
    cmds.connectAttr(neutralRot1 + '.output', blendcl2 + '.color1R')
    cmds.connectAttr(neutralRot2 + '.output', blendcl2 + '.color1G')
    cmds.connectAttr(neutralRot3 + '.output', blendcl2 + '.color1B')
    cmds.setAttr(blendcl2 + '.color2B', 0)
    legJnt1=cmds.joint(n = si + '_' + un + 'drivenLegA_jnt')
    legJnt2=cmds.joint(n = si + '_' + un + 'drivenLegB_bnd_jnt')
    legJnt3=cmds.joint(n = si + '_' + un + 'drivenLegC_bnd_jnt')
    legJnt4=cmds.joint(n = si + '_' + un + 'drivenLegD_bnd_jnt')
    cmds.parent(legJnt1, femurJnt, r = True)
    cmds.setAttr(legJnt2 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.setAttr(legJnt3 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.setAttr(legJnt4 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.pointConstraint(legrollJnt2, legJnt2)
    cmds.pointConstraint(legrollJnt3, legJnt3)
    cmds.pointConstraint(legrollJnt4, legJnt4)    
    cmds.select(d = True)
    legShinJnt1=cmds.joint(n = si + '_' + un + 'drivenLegShinA_jnt')
    legShinJnt2=cmds.joint(n = si + '_' + un + 'drivenLegShinB_bnd_jnt')
    legShinJnt3=cmds.joint(n = si + '_' + un + 'drivenLegShinC_bnd_jnt')
    legShinJnt4=cmds.joint(n = si + '_' + un + 'drivenLegShinD_bnd_jnt')
    cmds.parent(legShinJnt1, kneeJnt, r = True)
    cmds.setAttr(legShinJnt2 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.setAttr(legShinJnt3 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.setAttr(legShinJnt4 + '.ty', cmds.getAttr(lowerLegStretchMpd2 + '.oz'))
    cmds.pointConstraint(legShinrollJnt2, legShinJnt2)
    cmds.pointConstraint(legShinrollJnt3, legShinJnt3)
    cmds.pointConstraint(legShinrollJnt4, legShinJnt4)
    bendGrpA = cmds.group(spineCurveFemur[2], n = si + '_' + un + 'BendFemurCurve_grp')
    bendGrpB = cmds.group(spineCurveShin[2], n = si + '_' + un + 'BendShinCurve_grp')
    bendGrp = cmds.group(spineCurveFemur[0], spineCurveShin[0], bendGrpA, bendGrpB, n = si + '_' + un + 'bendyLegCurves_grp')
    cmds.setAttr(bendGrp + '.inheritsTransform', 0)
    cmds.select(kneeJnt)
    bendyStaticAnkleJnt = cmds.joint(n = si + '_' + un + 'bendyStaticAnkle_jnt')
    cmds.delete(cmds.parentConstraint(ankleJnt, bendyStaticAnkleJnt))
    cmds.skinCluster(bendyFemurJnt, bendyStaticKneeJnt, spineCurveFemur[2], tsb = True)
    cmds.skinCluster(bendyKneeJnt, bendyShinJnt, bendyStaticAnkleJnt, spineCurveShin[2], tsb = True)
    try:
        cmds.parent(bendGrp, 'c_' + un + 'SubWorld_ctrl')
    except:
        print 'no base controller found, no foundation module, missing c' + un + 'SubWorld_ctrl'
    ''' make parentSpace for spine etc '''
    spineToLegIkParent = cmds.spaceLocator(n = si + '_' + un + 'LegsParentToSpineStart_loc' )[0]
    hipToIkParent = cmds.spaceLocator(n = si + '_' + un + 'LegsParentTohip_loc' )[0]
    worldIkParent = cmds.spaceLocator(n = si + '_' + un + 'LegsParentToWorld_loc' )[0]
    worlds = [spineToLegIkParent, hipToIkParent, worldIkParent]
    for e in worlds:
        cmds.delete(cmds.pointConstraint(footctrlGrp, e))
    constraint = cmds.parentConstraint(spineToLegIkParent, hipToIkParent, worldIkParent, footctrlGrp, mo = True)[0]
    cmds.addAttr(legShape, longName = 'IK_world',at = 'enum', en = ('fkPelvis:spine:world'),k = True)
    cmds.setAttr(legShape + '.IK_world', 2)
    cond = cmds.createNode('condition', n = si + '_' + un + 'LegikParentA_cnd')
    cmds.connectAttr(legShape + '.IK_world', cond + '.firstTerm')
    cmds.setAttr(cond + '.colorIfTrueR', 1)
    cmds.setAttr(cond + '.colorIfFalseR', 0)
    cmds.connectAttr(cond + '.outColorR', constraint + '.' + si + '_' + un + 'LegsParentTohip_locW1')
    cond = cmds.createNode('condition', n = si + '_' + un + 'LegikParentB_cnd')
    cmds.connectAttr(legShape + '.IK_world', cond + '.firstTerm')
    cmds.setAttr(cond + '.secondTerm', 1)
    cmds.setAttr(cond + '.colorIfTrueR', 1)
    cmds.setAttr(cond + '.colorIfFalseR', 0)
    cmds.connectAttr(cond + '.outColorR', constraint + '.' + si + '_' + un + 'LegsParentToSpineStart_locW0')
    cond = cmds.createNode('condition', n = si + '_' + un + 'LegikParentC_cnd')
    cmds.connectAttr(legShape + '.IK_world', cond + '.firstTerm')
    cmds.setAttr(cond + '.secondTerm', 2)
    cmds.setAttr(cond + '.colorIfTrueR', 1)
    cmds.setAttr(cond + '.colorIfFalseR', 0)
    cmds.connectAttr(cond + '.outColorR', constraint + '.' + si + '_' + un + 'LegsParentToWorld_locW2')
    ''' foot banking '''
    bankA = cmds.spaceLocator(n = si + '_' + un + 'bankInside_loc')[0]
    bankB = cmds.spaceLocator(n = si + '_' + un + 'bankOutside_loc')[0]
    cmds.delete(cmds.parentConstraint('l_' + un + 'R_footEdge_jnt_temp', bankA))
    cmds.delete(cmds.parentConstraint('l_' + un + 'L_footEdge_jnt_temp', bankB))
    cmds.parent(bankB, bankA)
    cmds.parent(footRollLocGrp, bankB)
    cmds.parent(bankA, footTipctrl)
    bankCndA = cmds.createNode('condition', n = si + '_' + un + 'FootBankA_cnd')
    cmds.connectAttr( ikLegctrl + '.Foot_bank', bankCndA + '.firstTerm')
    cmds.connectAttr( ikLegctrl + '.Foot_bank', bankCndA + '.colorIfTrueR')
    cmds.setAttr(bankCndA + '.operation', 3)
    cmds.connectAttr(bankCndA + '.outColorR', bankA + '.rz')
    bankCndB = cmds.createNode('condition', n = si + '_' + un + 'FootBankA_cnd')
    cmds.connectAttr( ikLegctrl + '.Foot_bank', bankCndB + '.firstTerm')
    cmds.connectAttr( ikLegctrl + '.Foot_bank', bankCndB + '.colorIfTrueR')
    cmds.setAttr(bankCndB + '.operation', 5)
    cmds.connectAttr(bankCndB + '.outColorR', bankB + '.rz')
    togVis(bankA)
    # parent pelvis under pelvis control
    if si == 'l':
        cmds.parent(pelvisJnt, pelvisSubctrl)
    # add limitations
    lockTranslate(ankleJnt)
    lockScale(pv)
    lockScale(ikLegctrl)
    lockRotate(pv)
    colorcon(femurJnt, 23)
    if si == 'l':
        colorcon(pelvisJnt, 23)
        colorcon(pv,6)
        colorcon(femurJnt, 6)
        colorcon(ikLegctrl ,6)
        colorcon(footTipctrl, 6)
        colorcon(Ballctrl, 6)
        colorcon(legShinBendyctrl, 6)
        colorcon(femurBendyctrl, 6)
        colorcon(bendykneectrl, 6)
    else:
        colorcon(pv,13)
        colorcon(femurJnt, 13)
        colorcon(ikLegctrl ,13)
        colorcon(footTipctrl, 13)
        colorcon(Ballctrl, 13)
        colorcon(legShinBendyctrl, 13)
        colorcon(femurBendyctrl, 13)
        colorcon(bendykneectrl, 13)
    colorcon(pelvisctrl, 17)
    togVis(bendGrp)
    togVis(bendyShinJnt)
    togVis(bendyFemurJnt)
    togVis(localWorld)
    togVis(legShape)
    togVis(ik_handle)
    togVis(targetLoc)
    togVis(aimLoc)
    togVis(femurAimLoc)
    togVis(femurTargetLoc)
    togVis(worldIkParent)
    togVis(neutralWorld)
    togVis(hipToIkParent)
    togVis(spineToLegIkParent)
    togVis(legShinrollJnt1)
    togVis(legShinTwistJnt1)
    togVis(legrollJnt1)
    togVis(legTwistJnt1)
    addRotationOrderctrl(femurJnt)
    addRotationOrderctrl(kneeJnt)
    addRotationOrderctrl(ikLegctrl)
    cmds.parent(hipToIkParent, sOffset)
    if cmds.objExists(un + 'Rig_grp'):
        cmds.parent(spineToLegIkParent, un + 'Rig_grp')
    baseLegGrp = cmds.group(em = True, n = si + '_' + un + 'Baseleg_grp')
    cmds.parent(sOffset, legGrp, baseLegGrp)
    ''' additional cleanup '''   
    cmds.delete(cmds.parentConstraint(neutralWorld, localWorld)) # to prevent pv from rotating when switching parent.
    ''' add bind's '''
    skinclusters = cmds.ls(typ = 'skinCluster')
    for skn in skinclusters: # following line enables joints to be moved even when bind.
        try:
            cmds.skinCluster(skn, e= True, moveJointsMode = True)
        except:
            pass
    if si == 'r':
        if cmds.objExists('c_' + un + 'Pelvis_bind'):
            skinPelvis = 'c_' + un + 'Pelvis_bind'
            lskinFemur = 'l_' + un + 'Femur_bind'
            lskinKnee = 'l_' + un + 'Knee_bind'
            lskinAnkle = 'l_' + un + 'Ankle_bind'
            lskinBall = 'l_' + un + 'Ball_bind'
            lskinBThighB = 'l_' + un + 'BendyThighB_bind'
            lskinBThighC = 'l_' + un + 'BendyThighC_bind'
            lskinBThighD = 'l_' + un + 'BendyThighD_bind'
            lskinBShinB = 'l_' + un + 'BendyShinB_bind'
            lskinBShinC = 'l_' + un + 'BendyShinC_bind'
            lskinBShinD = 'l_' + un + 'BendyShinD_bind'
            rskinFemur = 'r_' + un + 'Femur_bind'
            rskinKnee = 'r_' + un + 'Knee_bind'
            rskinAnkle = 'r_' + un + 'Ankle_bind'
            rskinBall = 'r_' + un + 'Ball_bind'
            rskinBThighB = 'r_' + un + 'BendyThighB_bind'
            rskinBThighC = 'r_' + un + 'BendyThighC_bind'
            rskinBThighD = 'r_' + un + 'BendyThighD_bind'
            rskinBShinB = 'r_' + un + 'BendyShinB_bind'
            rskinBShinC = 'r_' + un + 'BendyShinC_bind'
            rskinBShinD = 'r_' + un + 'BendyShinD_bind'
        else:
            cmds.select(d = True)
            if cmds.objExists('c_' + un + 'Pelvis_bind'):
                skinPelvis = 'c_' + un + 'Pelvis_bind'
            else:
                skinPelvis = cmds.joint(n = 'c_' + un + 'Pelvis_bind')
                cmds.setAttr(skinPelvis + '.radius', 3)
                colorcon(skinPelvis, 1)           
            #l
            lskinFemur = cmds.joint(n = 'l_' + un + 'Femur_bind')
            cmds.setAttr(lskinFemur + '.radius', 3)
            colorcon(lskinFemur, 1)
            lskinKnee = cmds.joint(n = 'l_' + un + 'Knee_bind')
            cmds.setAttr(lskinKnee + '.radius', 3)
            colorcon(lskinKnee, 1)
            lskinAnkle = cmds.joint(n = 'l_' + un + 'Ankle_bind')
            cmds.setAttr(lskinAnkle + '.radius', 3)
            colorcon(lskinAnkle, 1)
            lskinBall = cmds.joint(n = 'l_' + un + 'Ball_bind')
            cmds.setAttr(lskinBall + '.radius', 3)
            colorcon(lskinBall, 1)
            lskinBThighB = cmds.joint(n = 'l_' + un + 'BendyThighB_bind')
            cmds.setAttr(lskinBThighB + '.radius', 3)
            colorcon(lskinBThighB, 1)
            lskinBThighC = cmds.joint(n = 'l_' + un + 'BendyThighC_bind')
            cmds.setAttr(lskinBThighC + '.radius', 3)
            colorcon(lskinBThighC, 1)
            lskinBThighD = cmds.joint(n = 'l_' + un + 'BendyThighD_bind')
            cmds.setAttr(lskinBThighD + '.radius', 3)
            colorcon(lskinBThighD, 1)
            lskinBShinB = cmds.joint(n = 'l_' + un + 'BendyShinB_bind')
            cmds.setAttr(lskinBShinB + '.radius', 3)
            colorcon(lskinBShinB, 1)
            lskinBShinC = cmds.joint(n = 'l_' + un + 'BendyShinC_bind')
            cmds.setAttr(lskinBShinC + '.radius', 3)
            colorcon(lskinBShinC, 1)
            lskinBShinD = cmds.joint(n = 'l_' + un + 'BendyShinD_bind')
            cmds.setAttr(lskinBShinD + '.radius', 3)
            colorcon(lskinBShinD, 1)
            #r        
            rskinFemur = cmds.joint(n = 'r_' + un + 'Femur_bind')
            cmds.setAttr(rskinFemur + '.radius', 3)
            colorcon(rskinFemur, 1)
            rskinKnee = cmds.joint(n = 'r_' + un + 'Knee_bind')
            cmds.setAttr(rskinKnee + '.radius', 3)
            colorcon(rskinKnee, 1)
            rskinAnkle = cmds.joint(n = 'r_' + un + 'Ankle_bind')
            cmds.setAttr(rskinAnkle + '.radius', 3)
            colorcon(rskinAnkle, 1)
            rskinBall = cmds.joint(n = 'r_' + un + 'Ball_bind')
            cmds.setAttr(rskinBall + '.radius', 3)
            colorcon(rskinBall, 1)
            rskinBThighB = cmds.joint(n = 'r_' + un + 'BendyThighB_bind')
            cmds.setAttr(rskinBThighB + '.radius', 3)
            colorcon(rskinBThighB, 1)
            rskinBThighC = cmds.joint(n = 'r_' + un + 'BendyThighC_bind')
            cmds.setAttr(rskinBThighC + '.radius', 3)
            colorcon(rskinBThighC, 1)
            rskinBThighD = cmds.joint(n = 'r_' + un + 'BendyThighD_bind')
            cmds.setAttr(rskinBThighD + '.radius', 3)
            colorcon(rskinBThighD, 1)
            rskinBShinB = cmds.joint(n = 'r_' + un + 'BendyShinB_bind')
            cmds.setAttr(rskinBShinB + '.radius', 3)
            colorcon(rskinBShinB, 1)
            rskinBShinC = cmds.joint(n = 'r_' + un + 'BendyShinC_bind')
            cmds.setAttr(rskinBShinC + '.radius', 3)
            colorcon(rskinBShinC, 1)
            rskinBShinD = cmds.joint(n = 'r_' + un + 'BendyShinD_bind')
            cmds.setAttr(rskinBShinD + '.radius', 3)
            colorcon(rskinBShinD, 1)
            # label joints
            jointLabel(skinPelvis, skinPelvis[2:], 0)
            jointLabel(lskinFemur, lskinFemur[2:], 1)
            jointLabel(lskinKnee, lskinKnee[2:], 1)
            jointLabel(lskinAnkle, lskinAnkle[2:], 1)
            jointLabel(lskinBall, lskinBall[2:], 1)
            jointLabel(lskinBThighB, lskinBThighB[2:], 1)
            jointLabel(lskinBThighC, lskinBThighC[2:], 1)
            jointLabel(lskinBThighD, lskinBThighD[2:], 1)
            jointLabel(lskinBShinB, lskinBShinB[2:], 1)
            jointLabel(lskinBShinC, lskinBShinC[2:], 1)
            jointLabel(lskinBShinD, lskinBShinD[2:], 1)
            jointLabel(rskinFemur, rskinFemur[2:], 2)
            jointLabel(rskinKnee, rskinKnee[2:], 2)
            jointLabel(rskinAnkle, rskinAnkle[2:], 2)
            jointLabel(rskinBall, rskinBall[2:], 2)
            jointLabel(rskinBThighB, rskinBThighB[2:], 2)
            jointLabel(rskinBThighC, rskinBThighC[2:], 2)
            jointLabel(rskinBThighD, rskinBThighD[2:], 2)
            jointLabel(rskinBShinB, rskinBShinB[2:], 2)
            jointLabel(rskinBShinC, rskinBShinC[2:], 2)
            jointLabel(rskinBShinD, rskinBShinD[2:], 2)
        cmds.parent(skinPelvis, 'c_' + un + 'PelvisBnd_jnt', r = True)
        cmds.parent(lskinFemur, 'l_' + un + 'Femur_bnd_ctrl', r = True)
        cmds.parent(lskinKnee, 'l_' + un + 'FreeTransknee_ctrl', r = True) 
        cmds.parent(lskinAnkle, 'l_' + un + 'Ankle_bnd_ctrl', r = True)    
        cmds.parent(lskinBall, 'l_' + un + 'Ball_bnd_ctrl', r = True)  
        cmds.parent(lskinBThighB, 'l_' + un + 'drivenLegB_bnd_jnt', r = True)  
        cmds.parent(lskinBThighC, 'l_' + un + 'drivenLegC_bnd_jnt', r = True)  
        cmds.parent(lskinBThighD, 'l_' + un + 'drivenLegD_bnd_jnt', r = True)  
        cmds.parent(lskinBShinB, 'l_' + un + 'drivenLegShinB_bnd_jnt', r = True)   
        cmds.parent(lskinBShinC, 'l_' + un + 'drivenLegShinC_bnd_jnt', r = True)   
        cmds.parent(lskinBShinD, 'l_' + un + 'drivenLegShinD_bnd_jnt', r = True)
        cmds.parent(rskinFemur, 'r_' + un + 'Femur_bnd_ctrl', r = True)
        cmds.parent(rskinKnee, 'r_' + un + 'FreeTransknee_ctrl', r = True) 
        cmds.parent(rskinAnkle, 'r_' + un + 'Ankle_bnd_ctrl', r = True)    
        cmds.parent(rskinBall, 'r_' + un + 'Ball_bnd_ctrl', r = True)  
        cmds.parent(rskinBThighB, 'r_' + un + 'drivenLegB_bnd_jnt', r = True)  
        cmds.parent(rskinBThighC, 'r_' + un + 'drivenLegC_bnd_jnt', r = True)  
        cmds.parent(rskinBThighD, 'r_' + un + 'drivenLegD_bnd_jnt', r = True)  
        cmds.parent(rskinBShinB, 'r_' + un + 'drivenLegShinB_bnd_jnt', r = True)   
        cmds.parent(rskinBShinC, 'r_' + un + 'drivenLegShinC_bnd_jnt', r = True)   
        cmds.parent(rskinBShinD, 'r_' + un + 'drivenLegShinD_bnd_jnt', r = True)    
        toSet = [skinPelvis, lskinFemur, lskinKnee, lskinAnkle, lskinBall, lskinBThighB, lskinBThighC, lskinBThighD, lskinBShinB, lskinBShinC, lskinBShinD, rskinFemur, rskinKnee, rskinAnkle, rskinBall, rskinBThighB, rskinBThighC, rskinBThighD, rskinBShinB, rskinBShinC, rskinBShinD]
        for e in toSet:
            setTrans(e, 0)
            cmds.setAttr(e + '.jointOrientX', 0)
            cmds.setAttr(e + '.jointOrientY', 0)
            cmds.setAttr(e + '.jointOrientZ', 0)
        # format joints
        bindJnts = ['c_' + un + 'Pelvis_bind', 'r_' + un + 'Femur_bind', 'r_' + un + 'Knee_bind', 'r_' + un + 'Ankle_bind', 'r_' + un + 'Ball_bind', 'r_' + un + 'BendyThighB_bind', 'r_' + un + 'BendyThighC_bind', 'r_' + un + 'BendyThighD_bind', 'r_' + un + 'BendyShinB_bind', 'r_' + un + 'BendyShinC_bind', 'r_' + un + 'BendyShinD_bind', 'l_' + un + 'Femur_bind', 'l_' + un + 'Knee_bind', 'l_' + un + 'Ankle_bind', 'l_' + un + 'Ball_bind', 'l_' + un + 'BendyThighB_bind', 'l_' + un + 'BendyThighC_bind', 'l_' + un + 'BendyThighD_bind', 'l_' + un + 'BendyShinB_bind', 'l_' + un + 'BendyShinC_bind', 'l_' + un + 'BendyShinD_bind']
        for e in bindJnts:
            cmds.setAttr(e + '.radius', 3)
            colorcon(e, 16)
        # set bind joints
        if cmds.objExists('c_' + un + 'LegsBind_set'):
            pass
        else:
            cmds.sets(bindJnts, n = 'c_' + un + 'LegsBind_set')
    for skn in skinclusters: # following line disables joints from being moved when in bind.
        try:
            cmds.skinCluster(skn, e= True, moveJointsMode = False)
        except:
            pass
    cmds.select(d = True)
    legGrp = cmds.group(worldIkParent, neutralWorld, spineToLegIkParent, bendGrp, baseLegGrp, n = si + '_' + un + 'Leg_grp')
    if si == 'l':
        si = 'r'
        legSetup(si, un)
    else:
        mirGrp = cmds.group(em = True, n = si + '_' + un + 'mirroredLeg_grp')
        cmds.parent(legGrp, mirGrp)
        cmds.setAttr(mirGrp + '.sx', -1)
        cmds.parent('l_' + un + 'Leg_grp', legGrp, 'c_' + un + 'PelvisFkctrl_grp')
        cmds.delete(mirGrp)
        if cmds.objExists(un + '_templateBindJnt_grp'):
            cmds.delete(un + '_templateBindJnt_grp')
        si = 'l'
    cmds.parentConstraint(pelvisSubctrl, sOffset, mo = True)
         
''' template mode '''
if __name__ == '__main__':
    un = ''
    si = 'l'
    legTemplate(si, un)



    ''' rig mode '''
    #legSetup(si, un)